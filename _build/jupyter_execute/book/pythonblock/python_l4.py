#!/usr/bin/env python
# coding: utf-8

# (python_l4)=
# 
# # Переменные и вывод информации в Python
# 
# ## Описание лекции
# 
# Из этой лекции вы узнаете о:
# 
# - базовых типах данных и переменных
# - простейших операциях с числами и строками
# - функции print
# - выводе информации с подстановкой значений
# 
# ## Суть переменных в `Python`
# 
# Настало время приступить к изучению непосредственно Питона - ведь прошло три лекции, а мы об языке программирования и не говорили вовсе! И поскольку наш курс посвящен физике, то начнём со [знакомой всем по школьным карандашам формулы](https://ru.wikipedia.org/wiki/%D0%AD%D0%BA%D0%B2%D0%B8%D0%B2%D0%B0%D0%BB%D0%B5%D0%BD%D1%82%D0%BD%D0%BE%D1%81%D1%82%D1%8C_%D0%BC%D0%B0%D1%81%D1%81%D1%8B_%D0%B8_%D1%8D%D0%BD%D0%B5%D1%80%D0%B3%D0%B8%D0%B8) $E=mc^2$. По ней можно вычислить полную энергию физического объекта $E$ с помощью известной массы объекта $m$ и константы $c$. Эта постоянная, указывающая на скорость света в вакууме, используется настолько часто, что для неё выделили **отдельное обозначение в виде буквы латинского алфавита** - как и для многих других аналогичных величин. Если в формуле встречается $c$ (в известном контексте) - то вы всегда уверены, что именно нужно подставить при расчётах. 
# 
# Этот пример полностью описывает концепцию **переменных** в языках программирования, и `Python` - не исключение. Запись $x = 3$ означает, что везде по тексту далее под иксом подразумевается именно тройка, и ничего иначе (пока не будет введено новое определение). Этой же логике подчиняется питон. Сначала указывается **имя переменной**, а затем - ассоциируемое с ней значение.

# In[1]:


c = 299_792_458 # запишем константу, м/с
m = 0.5 # масса некоторого абстрактного объекта, кг
E = m * (c ** 2) # вычисляем энергию, Дж

some_variable_1 = 10.2 # какая-то другая переменная
m = 12


# Пример кода выше иллюстрирует сразу несколько базовых концепций, которые нужно запомнить:
# 1. В объявлении переменной нет ничего сложного - синтаксис и правила интуитивно понятны: это можно делать как в физике/математике, как в учебниках и статьях
# 2. `#` означает комментарий, то есть произвольный текст, который не воспринимается питоном (всё **до конца строки** кода полностью игнорируется). Служит исключительно для создания подсказок в коде, объяснения происходящего, то есть для удобства
# 3. Числа могут быть **целыми и вещественными**. Разряды в целых числах для удобства визуального восприятия можно разделять нижней чертой
# 4. **Значение переменной может быть вычислимым**, то есть являться производной от других переменных (как $E$, ведь это результат перемножения). На самом деле значение вычисляется в момент объявления переменной (при сложной формуле расчёта процесс может занимать некоторое время) 
# 5. Операция возведения в квадрат реализуется с помощью `**`
# 6. В качестве названия переменных можно использовать **буквы и цифры**, а также некоторые символы. Однако **имя переменной не может начинаться с цифры**
# 7. Переменные можно переопределять (и даже менять тип). Однако **старое значение в этом случае будет безвозвратно утрачено**. В данном примере после выполнения последней строчки нельзя установить, чему было равно $m$ до того, как переменной было присвоено значение дюжины
# 
# Если говорить менее строго и более абстрактно, то **переменная - это контейнер** (или коробка), в котором что-то лежит, и на самой коробке на приклеенном листочке бумаги указно содержимое. Чем понятнее надпись - тем легче найти и использовать объект (поэтому переменные с названием из одной буквы воспринимаются плохо, особенно если таких переменных очень много). 
# 
# ```{figure} /_static/pythonblock/variables_l4/box_with_a_name.png
# :name: box_with_a_name
# :width: 400px
# 
# [Объявить переменную - значит положить объект в коробку с подписью](https://stevenpcurtis.medium.com/what-is-a-variable-3447ac1331b9)
# ```
# 
# В листинге кода выше важно заметить, что существует разница между двумя типами численных переменных: **целые и вещественные**. При сугубо математических расчётах и арифметических операциях не имеет значения, какого типа переменная. Однако для некоторого функционала в `Python` нужно быть аккуратным. Мы поговорим подробно об этом в следующих лекциях, а пока стоит запомнить, что вещи, которые необходимо посчитать - в том числе и длину - должны быть целочисленными (как и в жизни: первый, второй, третий...).
