#!/usr/bin/env python
# coding: utf-8

# (jupyter_l3)=
# 
# # Знакомство с инструментарием: Jupyter
# 
# ## Описание лекции
# 
# Эта лекция расскажет:
# 
# - что такое `Jupyter` и чем он хорош
# - о видах ячеек и режимах работы  в `Jupyter`
# - о самых необходимых горячих клавишах
# - что такое ядро и почему вас это должно волновать
# 
# ## Введение
# 
# Как любой мастер должен знать свой инструмент, так и любой человек, решивший пройти курс QML, должен понимать тонкости рабочей среды. Как вы уже могли понять по прошлому занятию - всю (или большая часть) работы мы будем делать в `Jupyter Notebook`. Но бояться нечего - по сути `Jupyter` это _продвинутый текстовый редактор_ с функцией запуска кода и получения результатов вычислений.  Настолько продвинутый, что позволяет вам не только рисовать картинки и писать формулы, но даже строить целые интерактивные карты:
# 
# ```{figure} /_static/pythonblock/jupyter_l3/interactive_map.gif
# :name: interactive_map
# :width: 600px
# 
# [Пример интерактивной визуализации прямо внутри рабочего файла с кодом](https://medium.com/@bartomolina/geospatial-data-visualization-in-jupyter-notebooks-ffa79e4ba7f8)
# ```
# 
# На курсе, конечно, работы с гео-данными не будет, однако очень пригодятся вывод информации в виде _таблиц_, _создание и отрисовка простых графиков_ - а главное всё это происходит в **браузере**. Редактирование кода в браузере не вызывает лишних проблем со средами разработки, и в то же время доступно максимально широкому кругу людей. В этом редакторе можно запускать `Python` код, что очень похоже на интерактивный редактор MATLAB, если вы с ним знакомы. 
# 
# Благодаря удобству использования и доступности `Jupyter` в настоящее время стал крупным игроком в нише научных вычислений и быстрого прототипирования. Вдобавок он безумно удобен для обучения и передачи знаний. Почему? Давайте разбираться.
# 
# ## Типы ячеек
# В `Jupyter ` существует несколько типов **ячеек**, мы поговорим о двух основных из них - это **Code** и **Markdown**.  В прошлом уроке мы создали пустой **ноутбук** в рамках проверки установки `Jupyter`. **Ноутбуком** это называется потому, что в переводе с английского **notebook** - это тетрадка (альтернативное название на русском языке). В тетрадке можно писать что-то осмысленное, черкаться, оставлять пометки. Сейчас вы должны видеть вот такой экран:
# 
# ```{figure} /_static/pythonblock/jupyter_l3/jupyter_ui_1.png
# :name: jupyter_ui_1
# :width: 600px
# 
# Пример пустой и только что созданной тетрадки
# ```
# 
# Здесь верхней красной чертой выделено поле с **названием** ноутбука. Можете кликнуть по нему, переименовать во что-то осмысленное и нажать `Enter`, чтобы применить изменения. Нижней же чертой обозначен выпадающий список переключений **типов ячеек**. По умолчанию создана одна **code** ячейка - в ней в будущем мы будем писать `Python`-код. Попробуйте кликнуть по списку и выбрать **Markdown** - визуально ячейка немного изменится. 
# 
# ```{admonition}Что такое [Markdown](https://ru.wikipedia.org/wiki/Markdown)?
# **Markdown** (произносится маркда́ун) — облегчённый язык разметки, созданный с целью обозначения **форматирования** в простом тексте, с максимальным сохранением его читаемости человеком. 
# 
# Пример:  Text attributes _italic_,**bold**, `monospace`.
# ```
# 
# С помощью Markdown можно разнообразить код, вставить формулы (как в LaTeX формате), ссылки на статьи и много всего другого. Попробуйте скопировать код из примера выше в Markdown-ячейку и нажать кнопку `Run`: 
# 
# ```{figure} /_static/pythonblock/jupyter_l3/jupyter_ui_2.png
# :name: jupyter_ui_2
# :width: 600px
# 
# Пример выполненой ячейки. Красным квадратом выделена кнопка  `Run`
# ```
# 
# Произошло следующее: ваша ячейка выполнилась, и `Jupyter` отобразил содержимое ячейки. С помощью такого форматирования можно писать целые статьи с выкладками, формулами, графиками, то есть сопроводительной информацией - поэтому, как уже было сказано, тетрадки очень удобны, особенно если соблюдать структуру (писать сверху вниз, с разделением на логические блоки). Также стоит отметить, что создалась новая Code-ячейка прямо под первой. 
# 
# ```{figure} /_static/pythonblock/jupyter_l3/jupyter_ui_3.png
# :name: jupyter_ui_3
# :width: 600px
# 
# Пример грамотно [оформленной Jupter-тетрадки](https://nbviewer.jupyter.org/github/rlabbe/Kalman-and-Bayesian-Filters-in-Python/blob/master/05-Multivariate-Gaussians.ipynb). Такую можно скинуть коллегам - и всем всё будет понятно! 
# ```
# 
# Вам не так часто придётся писать Markdown-заметки самостоятельно, основная причина их создания - ваше желание и дальнейшее удобство использования. Есть также другая причина, почему вы должны об этом узнать. Может так произойти, что вы _случайно_ изменили тип ячейки и не заметили этого. Теперь, если в Markdown-ячейку вставить `Python`-код, то ничего не произойдет (или возникнет ошибка). Если вы заметили что-то странное при выполнении кода в тетрадке - проверьте, корректен ли тип ячейки. Для выполнения кода нужно выставить тип **Code**
# 
# 
# ```{figure} /_static/pythonblock/jupyter_l3/jupyter_ui_4.png
# :name: jupyter_ui_4
# :width: 600px
# 
# Верхняя ячейка с `print` написана в Code-режиме и корректно выполянется, выводя цифру. Нижняя ячейка же содержит **текст, а не код**, и потому ничего работать не будет (точнее код отобразится как текст)
# ```
# 
# ```{tip} Визуальное различие
# Обратите внимание, как визуально отличаются эти две ячейки. Одна из них имеет прозрачный фон, другая - серый. У **Code** ячейки также есть странная надпись слева (про неё еще поговорим).
# ```
# 
# Каждый раз вручную запускать код (или Markdown) через кнопку `Run` не очень то и удобно, поэтому можно запомнить две комбинации клавиш. `CTRL+Enter` **выполнит** текущую ячейку и оставит "курсор" (указатель на ячейку) **на том же месте**, не создавая лишнюю строчку в ноутбуке. `Shift+Enter` же повторит функциональность кнопки `Run` - выполнит ячейку, и затем **перейдет на следующую** (или **создаст новую**, если текущая ячейка является **последней**). 
# 
# Первая комбинация ( `CTRL+Enter`) будет полезна в том случае, если вы что-то написали и знаете, что будете вносить изменения (например, менять цвет линии на графике в попытках добиться визуальной красоты), а значит придется менять код в этой же ячейке.
# Вторая (`Shift+Enter`) пригодится тогда, когда вы хотите запустить много-много идущих подряд ячеек (можете представить, что коллега скинул вам свою тетрадку с 30 клетками, и вы хотите её запустить, чтобы получить данные).
# Не беспокойтесь, буквально к концу первого блока лекций у вас выработается мышечная память, и вы будете жать сочетания клавиш на автомате. 
# 
# ## Режимы работы
# 
# Пришло время разобраться с цветом курсора, выделяющего ячейки. Он может быть **синим** или **зеленым**
# 
# ```{figure} /_static/pythonblock/jupyter_l3/jupyter_ui_5.png
# :name: jupyter_ui_5
# :width: 600px
# ```
# ```{figure} /_static/pythonblock/jupyter_l3/jupyter_ui_6.png
# :name: jupyter_ui_6
# :width: 600px
# 
# Пример разного цвета указателя клетки.
# ```
# 
# Никакой тайны за этим нет - это два режима, **режим редактирования и командный режим**. Зеленый цвет сигнализирует о том, что вы работаете **с текстовым содержимым ячейки**, то есть редактируете его! Можете писать код, вставлять формулы, что угодно. Но как только вы нажмете `ESC` на клавиатуре - цвет сменится на синий, что означает **возможность редактирования всего ноутбука, а не отдельных ячеек в нём**. Можно передвигать ячейки, удалять их (всецело, а не только текст в них), добавлять новые. Стрелочками на клавиатуре возможно осуществлять выбор ячейки (скакать вверх и вниз). Как только доберетесь до нужной (а вместо этого можно просто кликнуть по ней мышкой, что полезно в ситуации, когда клетка _очень_ далеко, в самом низу страницы) - жмите `Enter`, чтобы вернуться к редактированию. 
# 
# ```{figure} /_static/pythonblock/jupyter_l3/jupyter_ui_7.png
# :name: jupyter_ui_7
# :width: 600px
# 
# Кнопки управления ноутбуком.
# ```
# 
# Осуществлять вышеописанные операции можно с помощью горячих клавиш (или хоткеев) либо через интерфейс. Описание выделенного блока кнопок для картинки выше (в порядке слева направо, с указанием сочетаний клавиш):
# 1. _Сохранение ноутбука_ (`CTRL+S`) - делайте его **почаще**, чтобы не потерять результаты работы!
# 2. _Создание ячейки ниже текущей_ (`A`)
# 3. _Вырезать ячейку_ (`X`) - применимо и к целому блоку ячеек (можно выделить с зажатой клавишей `Shift`). Функциональность как и в Excel/Word: убрать в одном месте, чтобы вставить в другом
# 4. _Копировать ячейку_ (`C`)
# 5. _Вставить ячейку из буффера_ (`V`) - после вырезания или копирования ячейки
# 6. _Переместить текущую выделенную ячейку **вверх**_
# 7. _Переместить текущую выделенную ячейку **вниз**_ 
# 
# Описание всех доступных команд (и соответствующих им хоткеев) доступно при нажатии на кнопку с клавиатурой в правой части выделенного блока меню (вне красного прямоугольника).
